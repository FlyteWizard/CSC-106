{
    "docs": [
        {
            "location": "/", 
            "text": "CSC 106\n\n\nConnex\n\n\n\n\nInstructor\n: Alona Fyshe\n\n\nOffice\n: ECS 618\n\n\nEmail\n: \nafyshe@uvic.ca\n\n\nOffice Hours\n:\n\n\nWednesday, 09:30am to 11:20am \n\n\nOr by appointment\n\n\n\n\n\n\n\n\nOverview\n\n\nA general introduction to the field of computer science, its basic areas and its connections to interdisciplinary topics.\n\n\nTextbook\n\n\nThere is no textbook required for this course. \n\n\nThe recommended text is: \n\n\n\n\nInvitation to Computer Science (7th edition) by G. Michael Schneider and Judith L. Gersting, Cengage Learning.\n\n\n\n\nAssessment\n\n\n\n\n\n\n\n\nTask\n\n\nWeight\n\n\n\n\n\n\n\n\n\n\nAssignments\n\n\n40%\n\n\n\n\n\n\nLab Attendance\n\n\n5%\n\n\n\n\n\n\nMidterm Exams (3)\n\n\n55%\n\n\n\n\n\n\n\n\nDue Dates\n\n\nSubject to Change\n\n\n\n\n\n\n\n\nTask\n\n\nWeight\n\n\nDue\n\n\n\n\n\n\n\n\n\n\nAssignment 1\n\n\n10%\n\n\nJan. 24th, 2017\n\n\n\n\n\n\nMidterm Exam 1\n\n\n~19%\n\n\nJan. 31st, 2017\n\n\n\n\n\n\nAssignment 2\n\n\n10%\n\n\nFeb. 10th, 2017\n\n\n\n\n\n\nAssignment 3\n\n\n10%\n\n\nMar. 3rd, 2017\n\n\n\n\n\n\nMidterm Exam 2\n\n\n~19%\n\n\nMar. 7th, 2017\n\n\n\n\n\n\nAssignment 4\n\n\n10%\n\n\nMar. 21st, 2017\n\n\n\n\n\n\nMidterm Exam 3\n\n\n~19%\n\n\nApril 4th, 2017", 
            "title": "Home"
        }, 
        {
            "location": "/#csc-106", 
            "text": "", 
            "title": "CSC 106"
        }, 
        {
            "location": "/#connex", 
            "text": "Instructor : Alona Fyshe  Office : ECS 618  Email :  afyshe@uvic.ca  Office Hours :  Wednesday, 09:30am to 11:20am   Or by appointment", 
            "title": "Connex"
        }, 
        {
            "location": "/#overview", 
            "text": "A general introduction to the field of computer science, its basic areas and its connections to interdisciplinary topics.", 
            "title": "Overview"
        }, 
        {
            "location": "/#textbook", 
            "text": "There is no textbook required for this course.   The recommended text is:    Invitation to Computer Science (7th edition) by G. Michael Schneider and Judith L. Gersting, Cengage Learning.", 
            "title": "Textbook"
        }, 
        {
            "location": "/#assessment", 
            "text": "Task  Weight      Assignments  40%    Lab Attendance  5%    Midterm Exams (3)  55%", 
            "title": "Assessment"
        }, 
        {
            "location": "/#due-dates", 
            "text": "Subject to Change     Task  Weight  Due      Assignment 1  10%  Jan. 24th, 2017    Midterm Exam 1  ~19%  Jan. 31st, 2017    Assignment 2  10%  Feb. 10th, 2017    Assignment 3  10%  Mar. 3rd, 2017    Midterm Exam 2  ~19%  Mar. 7th, 2017    Assignment 4  10%  Mar. 21st, 2017    Midterm Exam 3  ~19%  April 4th, 2017", 
            "title": "Due Dates"
        }, 
        {
            "location": "/Annex/Homework-And-Announcements/", 
            "text": "Announcements\n\n\nAnnouncement 1 - January 6th, 2016\n\n\n\n\nAlice Gibbons (aligibbo@uvic.ca) - Main lab instructor\n\n\n10$ Access Cards (Get one from the library to have access outside of lab hours.)\n\n\n\n\nHomework\n\n\nHomework 1 - January 6th, 2016\n\n\n\n\nHow to write Pseudocode to calculate the average grade different groups of students.\n\n\nExtra practice (try with both one and two-table scenarios) - Available through Alona Fyshe slides.", 
            "title": "Homework And Announcements"
        }, 
        {
            "location": "/Annex/Homework-And-Announcements/#announcements", 
            "text": "", 
            "title": "Announcements"
        }, 
        {
            "location": "/Annex/Homework-And-Announcements/#announcement-1-january-6th-2016", 
            "text": "Alice Gibbons (aligibbo@uvic.ca) - Main lab instructor  10$ Access Cards (Get one from the library to have access outside of lab hours.)", 
            "title": "Announcement 1 - January 6th, 2016"
        }, 
        {
            "location": "/Annex/Homework-And-Announcements/#homework", 
            "text": "", 
            "title": "Homework"
        }, 
        {
            "location": "/Annex/Homework-And-Announcements/#homework-1-january-6th-2016", 
            "text": "How to write Pseudocode to calculate the average grade different groups of students.  Extra practice (try with both one and two-table scenarios) - Available through Alona Fyshe slides.", 
            "title": "Homework 1 - January 6th, 2016"
        }, 
        {
            "location": "/Lab/Lab/", 
            "text": "Databases\n\n\nLab 1 - January 10th, 2017\n\n\nSqLite\n\n\nHow we access data is we use these things called queries. \n\n\nIn the terminal type in:\n\n\nsqlite3\n\nand then\n\n.read FILENAME\n\nand then\n\nselect * from characters;\n\n\n\n\n\nOrder matters when running \nselect\n in the terminal from the database. \n\n\nIt is not case sensitive.\n\n\nEx. You can use FROM, ChaRacters, Select, ect. \n\n\nSelect dinstinct:\n applies only to what follows, and makes it so only unique data gets return. \n\n\nEx.\n\n\nsql\n select distinct title from characters;\n \n\n\nYou can have an or in your where.\n\n\nEx. \n\n\nsql\n select * from characters where title = 'Horton Hears a Who' or title = 'Horton Hatches the Egg';\n\n\nYou can order your return.\n\n\nEx. \n\n\nsql\n select name, year from characters order by year, title;\n\n\nAggregate function\n\n\n\n\ncount\n\n\nmax\n\n\nmin\n\n\navg", 
            "title": "Lab"
        }, 
        {
            "location": "/Lab/Lab/#databases", 
            "text": "", 
            "title": "Databases"
        }, 
        {
            "location": "/Lab/Lab/#lab-1-january-10th-2017", 
            "text": "SqLite  How we access data is we use these things called queries.   In the terminal type in:  sqlite3\n\nand then\n\n.read FILENAME\n\nand then\n\nselect * from characters;  Order matters when running  select  in the terminal from the database.   It is not case sensitive.  Ex. You can use FROM, ChaRacters, Select, ect.   Select dinstinct:  applies only to what follows, and makes it so only unique data gets return.   Ex.  sql\n select distinct title from characters;    You can have an or in your where.  Ex.   sql\n select * from characters where title = 'Horton Hears a Who' or title = 'Horton Hatches the Egg';  You can order your return.  Ex.   sql\n select name, year from characters order by year, title;  Aggregate function   count  max  min  avg", 
            "title": "Lab 1 - January 10th, 2017"
        }, 
        {
            "location": "/Lecture/1-Introduction/", 
            "text": "CSC 106 - Introduction\n\n\nLecture 1 - January 4th, 2017\n\n\nThese notes list the main ideas for this lecture. Please check out Alona Fyshe's slides for more information.\n\n\n\n\n\n\nAbacus (Japanese)\n\n\nWhy should we care about polynomials?\n\n\nAnalytical Engine\n\n\nPunch Cards (Held Instructions)\n\n\nRAM \n\n\nCPU\n\n\n\n\n\n\nTabulate the Census\n\n\nData Punch Cards\n\n\nIBM\n\n\n\n\n\n\nComputers (Who invented the first computer? A lot of people.)\n\n\nBinary \n\n\nConrad Zuse (Standard - Binary)\n\n\nAlan Turing (Crack German Codes - WW2)\n\n\nColossus (Crack German Codes - WW2)\n\n\nENIAC\n\n\nSolid State Transistor (Computers no longer for Gov, also for Business) \n\n\nApple (Bring Computers to Home)\n\n\nMacintosh (Desktop and Folders - Computers no longer just a terminal)", 
            "title": "1 Introduction"
        }, 
        {
            "location": "/Lecture/1-Introduction/#csc-106-introduction", 
            "text": "", 
            "title": "CSC 106 - Introduction"
        }, 
        {
            "location": "/Lecture/1-Introduction/#lecture-1-january-4th-2017", 
            "text": "These notes list the main ideas for this lecture. Please check out Alona Fyshe's slides for more information.    Abacus (Japanese)  Why should we care about polynomials?  Analytical Engine  Punch Cards (Held Instructions)  RAM   CPU    Tabulate the Census  Data Punch Cards  IBM    Computers (Who invented the first computer? A lot of people.)  Binary   Conrad Zuse (Standard - Binary)  Alan Turing (Crack German Codes - WW2)  Colossus (Crack German Codes - WW2)  ENIAC  Solid State Transistor (Computers no longer for Gov, also for Business)   Apple (Bring Computers to Home)  Macintosh (Desktop and Folders - Computers no longer just a terminal)", 
            "title": "Lecture 1 - January 4th, 2017"
        }, 
        {
            "location": "/Lecture/2-Databases/", 
            "text": "Databases and Pseudocode\n\n\nLecture 2 - January 6th, 2017\n\n\nThese notes list the main ideas for this lecture. Please check out Alona Fyshe's slides for more information.\n\n\n\n\n\n\n\n\nMotivating Example:\n\n\n\n\nCSC 106 - Keeping Records of Grades\n\n\nGoal: How to work with this Data\n\n\n\n\n\n\n\n\nPseudocode -\n Logic writing on your code.\n\n\n\n\nAlgorithm -\n Sets of steps\n\n\n\n\n\n\nTable 1: \n\n\n\n\n\n\n\n\nstud_id\n\n\nstud_name\n\n\ncourse_name\n\n\ncrn\n\n\nprof_name\n\n\ngrade\n\n\n\n\n\n\n\n\n\n\n101\n\n\nJoe Smith\n\n\nCSC 106\n\n\n23456\n\n\nTuring\n\n\n80\n\n\n\n\n\n\n111\n\n\nJohn Jackson\n\n\nCSC 106\n\n\n23456\n\n\nTuring\n\n\n45\n\n\n\n\n\n\n145\n\n\nAl Green\n\n\nCSC 106\n\n\n23456\n\n\nTuring\n\n\n66\n\n\n\n\n\n\n301\n\n\nMeg Lyon\n\n\nCSC 106\n\n\n23457\n\n\nJobs\n\n\n79\n\n\n\n\n\n\n200\n\n\nJane McKenzie\n\n\nCSC 106\n\n\n23457\n\n\nJobs\n\n\n83\n\n\n\n\n\n\n\n\nSolution For: The above question\n\n\ntotal = 0\ncount = 0\ni = 1\n\nwhile i =\n total # rows in table\n    total = total + grade in row i\n    count = count + 1\n    i = i + 1\n\naverage = total / count\n\n\n\n\nSolution For: Keeping track of grades for a specific teacher\n\n\ntotal = 0\ncount = 0 \ni = 1\n\nwhile i =\n total # rows in table\n    if prof-name of row i = Turing\n        total = toal + grade in row i\n        count = count + 1\n    i = i + 1\n\naverage = total / count\n\n\n\n\nSolution For: Inserting a new grade in the table\n \n\n\nBefore:\n\n\ni = # rows in table + 1\n\nstud_id for row i = 313\nstud_name for row i = Steve Cook\ncourse_name for row i = CSC 106 (Too much info)\nCRN for row i = 23456\nprof-name for row i = Turing (Too much info - CRN is all mighty)\ngrade for row i = 91\n\n\n\n\nAfter:\n\n\ni = # rows in grades table + 1\n\nstud_id for row i = 313\nstud_name for row i = Steve Cook\nCRN for row i = 23456\ngrade for row i = 91\n\n\n\n\n\n\nNOTE:\n The question now has two tables to work with instead of one.\n\n\nTable 1: Courses\n\n\n\n\n\n\n\n\ncourse\n\n\ncrn\n\n\nprof_name\n\n\n\n\n\n\n\n\n\n\nCSC 106\n\n\n23456\n\n\nTuring\n\n\n\n\n\n\nCSC 106\n\n\n23457\n\n\nJobs\n\n\n\n\n\n\n\n\nTable 2: Grades\n\n\n\n\n\n\n\n\nstud_id\n\n\nstud_name\n\n\ncrn\n\n\ngrade\n\n\n\n\n\n\n\n\n\n\n101\n\n\nJoe Smith\n\n\n23456\n\n\n80\n\n\n\n\n\n\n111\n\n\nJohn Jackson\n\n\n23456\n\n\n45\n\n\n\n\n\n\n145\n\n\nAl Green\n\n\n23456\n\n\n66\n\n\n\n\n\n\n301\n\n\nMeg Lyon\n\n\n23457\n\n\n79\n\n\n\n\n\n\n200\n\n\nJane McKenzie\n\n\n23457\n\n\n83\n\n\n\n\n\n\n\n\n\n\nSolution For: Calculating the average for students in class with CRN 23457\n\n\ntotal = 0\ncount = 0\ni = 1\n\nwhile i =\n total # of rows in grades tables\n    if crn in row i is 23457\n        total = total + grade in row i\n        count = count + 1\n    i + i + 1\naverage = total / count\n\n\n\n\nSolution For: Calculating a better average\n\n\nif  count = 0 \n    average = 0\nelse \n    average = total/count\n\n\n\n\nSolution For: Table Case: Inserting a new grade into two tables\n\n\nif input crn is not in classes table \n    return error\nelse \n    stud_id for row i = 313\n    stud_name = Steve Cook\n    crn = 23456\n    grade = 91\n\n\n\n\nSolution For: Calculating the average grade for classes that Turing teaches\n\n\ntotal = 0 \ncount = 0\nj = 1 (Index into classes table)\n\nwhile j =\n # rows in classes table \n    if row j of classes tables has prof_name = Turing\n        my_crn = crn in j of classes table\n\n        i = 1\n        while i =\n #rows in grades table\n            if crn for row i of grades table  = my_crn\n                table = total + grade in row i of grades table\n                count = count + 1\n            i = i + 1\n    j = j + 1\n\n\n\n\nLecture 3 - January 10th, 2017\n\n\nTrace Through Code\n\n\nCode:\n\n\nStep1 - total=0\nStep2 - count=0\nStep3 - i=1\nStep4 - while i \n= # rows in table, repeat steps 5 through 8\nStep5 -     if prof_name of row i equals Turing, do line 6 and 7 \nStep6 -         total = total + grade in row i\nStep7 -         count = count + 1\nStep8 -     i=i+1\nStep9 - average = total / count\n\n\n\n\nTable 1:\n\n\n\n\n\n\n\n\nstud_id\n\n\nstud_name\n\n\ncourse_name\n\n\ncrn\n\n\nprof_name\n\n\ngrade\n\n\n\n\n\n\n\n\n\n\n111\n\n\nJohn Jackson\n\n\nCSC 106\n\n\n23456\n\n\nTuring\n\n\n45\n\n\n\n\n\n\n200\n\n\nJane McKenzie\n\n\nCSC 106\n\n\n23457\n\n\nJobs\n\n\n83\n\n\n\n\n\n\n342\n\n\nPatricia Dune\n\n\nCSC 106\n\n\n23456\n\n\nTuring\n\n\n94\n\n\n\n\n\n\n301\n\n\nMeg Lyon\n\n\nCSC 106\n\n\n23457\n\n\nJobs\n\n\n79\n\n\n\n\n\n\n\n\nNote: #rows = 4\n\n\nSolution:\n\n\ntotal=0\ncount=0\ni=1\n\n--\n\ntotal=45\ncount=1\n1=2\n\n--\n\ni=3\n\n--\n\ntotal=139\ncount=2\ni=4\n\n--\n\ni=5\n\n-- \n\nAverage = 139/2 = 69.5\n\n\n\n\n\nWrite pseudocode that calculates the maximum grade for a student in class with crn = 23456\n\n\nTrace Through Code\n\n\nCode:\n\n\nStep1 - max=-1\nStep2 - i=1\nStep3 - while i \n= # rows in table, repeat steps 4 through 7\nStep4 -     if crn of row i equals 23456, do line 5 and 6 \nStep5 -         if max \n grade in row i do line 6\nStep6 -             max = grade in row i \nStep7 -     i=i+1\n\n\n\n\nTable:\n\n\n\n\n\n\n\n\nstud_id\n\n\nstud_name\n\n\ncourse_name\n\n\ncrn\n\n\nprof_name\n\n\ngrade\n\n\n\n\n\n\n\n\n\n\n111\n\n\nJohn Jackson\n\n\nCSC 106\n\n\n23456\n\n\nTuring\n\n\n45\n\n\n\n\n\n\n200\n\n\nJane McKenzie\n\n\nCSC 106\n\n\n23457\n\n\nJobs\n\n\n83\n\n\n\n\n\n\n342\n\n\nPatricia Dune\n\n\nCSC 106\n\n\n23456\n\n\nTuring\n\n\n94\n\n\n\n\n\n\n301\n\n\nMeg Lyon\n\n\nCSC 106\n\n\n23457\n\n\nJobs\n\n\n79\n\n\n\n\n\n\n\n\nSolution: \n\n\nmax=-1\ni=1\n\n--\n\nmax=45\ni=2\n\n--\n\ni=3\n\n--\n\nmax=94\ni=4\n\n--\n\ni=5\n\n\n\n\n\n\n\nSQL\n\n\nSql is a structured query language.\n\n\nDatabase\n\n\nA database is a collection of tables.\n\n\nInstall SqLite3\n\n\nbrew install sqlite\n\n\n\n\nStart by making a blank table: \n\n\ncreate table grades( stud_id int, stud_name text, course_name text, crn int, prof_name text, grade int);\n\n\n\n\nNote: Order of values must match the order of the columns when you created the table.\n\n\nQuery\n\n\nA query is a select statement that tells the computer what columms the result should have. \n\n\nEx.\n\n\nSelect stud_name, grade \nfrom grades;\n\n\n\n\nReturn\n\n\nTable 1: Grades\n\n\n\n\n\n\n\n\nstud_name\n\n\ngrade\n\n\n\n\n\n\n\n\n\n\nname\n\n\n56\n\n\n\n\n\n\nname\n\n\n78\n\n\n\n\n\n\n\n\nEx. \n\n\nSelect avg(grade)\nFrom grades;\n\n\n\n\n\n\n\n\n\n\navg(grade)\n\n\n\n\n\n\n\n\n\n\n72.8\n\n\n\n\n\n\n\n\nEx.\n\n\nselect max(grade)\nfrom grades;\n\n\n\n\n\n\n\n\n\n\nmax\n\n\n\n\n\n\n\n\n\n\n94\n\n\n\n\n\n\n\n\nEx.\n\n\nSelect stud_name, grade, crn \nfrom grades\nwhere crn = 23456;\n\n\n\n\n\n\n\n\n\n\nstud_name\n\n\ngrade\n\n\ncrn\n\n\n\n\n\n\n\n\n\n\nJoe Smith\n\n\n80\n\n\n23456\n\n\n\n\n\n\nJohn Jacks\n\n\n45\n\n\n23456\n\n\n\n\n\n\nAl Green\n\n\n66\n\n\n23456\n\n\n\n\n\n\nGreg Black\n\n\n60\n\n\n23456\n\n\n\n\n\n\nPatricia D\n\n\n94\n\n\n23456\n\n\n\n\n\n\n\n\nEx. \n\n\nSelect stud_name, grade \nfrom grades\nwhere prof_name = \u201cJobs\u201d;\n\n\n\n\nNote: text must be surrended by quotes. \n\n\n\n\n\n\n\n\nstud_name\n\n\ngrade\n\n\n\n\n\n\n\n\n\n\nMeg Lyon\n\n\n79\n\n\n\n\n\n\nJane McKen\n\n\n83\n\n\n\n\n\n\nRichard Fe\n\n\n70\n\n\n\n\n\n\nPaul Shelb\n\n\n66\n\n\n\n\n\n\nJohn Jacks\n\n\n85\n\n\n\n\n\n\n\n\n\n\nYou should know\n\n\n\n\nHow to step through pseudocode\n\n\nHow to write some simple SQL queries using: \u2013  avg\n\n\nmax\n\n\nwhere\n\n\n\n\nLecture 4 - January 11th, 2017\n\n\nSelect *\n is shorthand for \u201cselect all of the columns of the table\u201d. \n\n\n*\n can be viewed as a wild card. \n\n\nselect * from grades where crn = 23456 and grade \n 50;\n\n\nselect count(*)\n will return the number of rows returned. (Important for assignment 1). \n\n\nselect * from grades order by stud_name;\n will order the entries.\n\n\nselect * from grades order by grade desc;\n will sort by descending order.\n\n\nQuestion: Create a list of student names for Turing\u2019s class, ordered by name?\n\n\nselect stud_name from grades where prof_name = Turing order by stud_name;\n\n\nYou should know\n\n\n\n\nHow to step through pseudocode\n\n\n\n\nHow to write some simple SQL queries using:\n\n\n\n\navg\n\n\nmax\n\n\nwhere\n\n\nselect * \n\n\nselect count(*)\n\n\norder by\n\n\n\n\n\n\n\n\nMore Pseudocode Practice\n\n\nQuestion:  Write a query to print phone number of a person if it exists in the table\n \n\n\ninput: name_in (holds the name we look for)\n\n\n\n\n\n\n\n\nname\n\n\nnumber\n\n\n\n\n\n\n\n\n\n\nJoe\n\n\n472-5700\n\n\n\n\n\n\nLeo\n\n\n472-5702\n\n\n\n\n\n\nSara\n\n\n472-5701\n\n\n\n\n\n\n\n\nStep1 i=1\nStep2 found=NO\nStep3 while i =\n #rows in table do Step4-7\nStep4   if name in row i is name_in do Step5\n6\nStep5       print number in row i\nStep6       found=YES\nStep7   i= i+1\nStep8 if found = NO do Step9\nStep9   print \nno such person in directory.\n\n\n\n\n\nInefficiency, if you find the name and it's the first one in the table, the while loop will still run. \n\n\nStep1 i=1\nStep2 found=NO\nStep3 while i =\n #rows in table AND found = NO do Step4-7\nStep4   if name in row i is name_in do Step5\n6\nStep5       print number in row i\nStep6       found=YES\nStep7   i= i+1\nStep8 if found = NO do Step9\nStep9   print \nno such person in directory.\n\n\n\n\n\nExecution: \n\n\nname_in = \"Leo\"\ni=1\nfound = NO\n\n\nrows = 3\n\n\ni = 2\n\n--\n\n472-5702\nfound = YES\n\ni = 3\n\n--\n\nExit while loop\n\n\n\n\n\nselect number from phone_numbers where name = \"Leo\";\n - will be the query.\n\n\nCollatz Conjecture\n\n\nPick a number. If it\u2019s even, divide by two, if odd mulTply by three and add one Stop if the number is 1\n\n\nQuestion: Write this in Pseudocode\n \n\n\nBonus: Of Interest\n\n\n*  No one knows if there\u2019s a number for which the collatz conjecture will not terminate\n*  Has been checked for all numbers up to 260 \u2013  All of which do terminate at 1\n\n\n\ninpurt num+in (number to test)\nif num_in \n 1\n    print \nerror, bad number\n Exit \n\ncur_num = num_in\n    while cur_num is not 1\n        if cur_num is even do \n            divide by 2\n        else if cur_num is odd do \n            cur_num X 3 + 1\n\n\n\n\nnum_in = 4\ncur_num = 4\n\n\ncur_num = 2\n\n\ncur_num = 1\n\n\nExit while loop\n\n\n--\n\n\nnum_in = 5\ncur_num = 5\n\n\ncur_num = 16\n\n\ncur_num = 8\n\n\ncur_num = 4\n\n\ncur_num = 2\n\n\ncur_num = 1\n\n\nExit while loop\n\n\n\n\nLecture 5 - January 13th, 2017\n\n\nMissed Class", 
            "title": "2 Databases"
        }, 
        {
            "location": "/Lecture/2-Databases/#databases-and-pseudocode", 
            "text": "", 
            "title": "Databases and Pseudocode"
        }, 
        {
            "location": "/Lecture/2-Databases/#lecture-2-january-6th-2017", 
            "text": "These notes list the main ideas for this lecture. Please check out Alona Fyshe's slides for more information.     Motivating Example:   CSC 106 - Keeping Records of Grades  Goal: How to work with this Data     Pseudocode -  Logic writing on your code.   Algorithm -  Sets of steps    Table 1:      stud_id  stud_name  course_name  crn  prof_name  grade      101  Joe Smith  CSC 106  23456  Turing  80    111  John Jackson  CSC 106  23456  Turing  45    145  Al Green  CSC 106  23456  Turing  66    301  Meg Lyon  CSC 106  23457  Jobs  79    200  Jane McKenzie  CSC 106  23457  Jobs  83     Solution For: The above question  total = 0\ncount = 0\ni = 1\n\nwhile i =  total # rows in table\n    total = total + grade in row i\n    count = count + 1\n    i = i + 1\n\naverage = total / count  Solution For: Keeping track of grades for a specific teacher  total = 0\ncount = 0 \ni = 1\n\nwhile i =  total # rows in table\n    if prof-name of row i = Turing\n        total = toal + grade in row i\n        count = count + 1\n    i = i + 1\n\naverage = total / count  Solution For: Inserting a new grade in the table    Before:  i = # rows in table + 1\n\nstud_id for row i = 313\nstud_name for row i = Steve Cook\ncourse_name for row i = CSC 106 (Too much info)\nCRN for row i = 23456\nprof-name for row i = Turing (Too much info - CRN is all mighty)\ngrade for row i = 91  After:  i = # rows in grades table + 1\n\nstud_id for row i = 313\nstud_name for row i = Steve Cook\nCRN for row i = 23456\ngrade for row i = 91   NOTE:  The question now has two tables to work with instead of one.  Table 1: Courses     course  crn  prof_name      CSC 106  23456  Turing    CSC 106  23457  Jobs     Table 2: Grades     stud_id  stud_name  crn  grade      101  Joe Smith  23456  80    111  John Jackson  23456  45    145  Al Green  23456  66    301  Meg Lyon  23457  79    200  Jane McKenzie  23457  83      Solution For: Calculating the average for students in class with CRN 23457  total = 0\ncount = 0\ni = 1\n\nwhile i =  total # of rows in grades tables\n    if crn in row i is 23457\n        total = total + grade in row i\n        count = count + 1\n    i + i + 1\naverage = total / count  Solution For: Calculating a better average  if  count = 0 \n    average = 0\nelse \n    average = total/count  Solution For: Table Case: Inserting a new grade into two tables  if input crn is not in classes table \n    return error\nelse \n    stud_id for row i = 313\n    stud_name = Steve Cook\n    crn = 23456\n    grade = 91  Solution For: Calculating the average grade for classes that Turing teaches  total = 0 \ncount = 0\nj = 1 (Index into classes table)\n\nwhile j =  # rows in classes table \n    if row j of classes tables has prof_name = Turing\n        my_crn = crn in j of classes table\n\n        i = 1\n        while i =  #rows in grades table\n            if crn for row i of grades table  = my_crn\n                table = total + grade in row i of grades table\n                count = count + 1\n            i = i + 1\n    j = j + 1", 
            "title": "Lecture 2 - January 6th, 2017"
        }, 
        {
            "location": "/Lecture/2-Databases/#lecture-3-january-10th-2017", 
            "text": "Trace Through Code  Code:  Step1 - total=0\nStep2 - count=0\nStep3 - i=1\nStep4 - while i  = # rows in table, repeat steps 5 through 8\nStep5 -     if prof_name of row i equals Turing, do line 6 and 7 \nStep6 -         total = total + grade in row i\nStep7 -         count = count + 1\nStep8 -     i=i+1\nStep9 - average = total / count  Table 1:     stud_id  stud_name  course_name  crn  prof_name  grade      111  John Jackson  CSC 106  23456  Turing  45    200  Jane McKenzie  CSC 106  23457  Jobs  83    342  Patricia Dune  CSC 106  23456  Turing  94    301  Meg Lyon  CSC 106  23457  Jobs  79     Note: #rows = 4  Solution:  total=0\ncount=0\ni=1\n\n--\n\ntotal=45\ncount=1\n1=2\n\n--\n\ni=3\n\n--\n\ntotal=139\ncount=2\ni=4\n\n--\n\ni=5\n\n-- \n\nAverage = 139/2 = 69.5  Write pseudocode that calculates the maximum grade for a student in class with crn = 23456  Trace Through Code  Code:  Step1 - max=-1\nStep2 - i=1\nStep3 - while i  = # rows in table, repeat steps 4 through 7\nStep4 -     if crn of row i equals 23456, do line 5 and 6 \nStep5 -         if max   grade in row i do line 6\nStep6 -             max = grade in row i \nStep7 -     i=i+1  Table:     stud_id  stud_name  course_name  crn  prof_name  grade      111  John Jackson  CSC 106  23456  Turing  45    200  Jane McKenzie  CSC 106  23457  Jobs  83    342  Patricia Dune  CSC 106  23456  Turing  94    301  Meg Lyon  CSC 106  23457  Jobs  79     Solution:   max=-1\ni=1\n\n--\n\nmax=45\ni=2\n\n--\n\ni=3\n\n--\n\nmax=94\ni=4\n\n--\n\ni=5", 
            "title": "Lecture 3 - January 10th, 2017"
        }, 
        {
            "location": "/Lecture/2-Databases/#sql", 
            "text": "Sql is a structured query language.", 
            "title": "SQL"
        }, 
        {
            "location": "/Lecture/2-Databases/#database", 
            "text": "A database is a collection of tables.  Install SqLite3  brew install sqlite  Start by making a blank table:   create table grades( stud_id int, stud_name text, course_name text, crn int, prof_name text, grade int);  Note: Order of values must match the order of the columns when you created the table.", 
            "title": "Database"
        }, 
        {
            "location": "/Lecture/2-Databases/#query", 
            "text": "A query is a select statement that tells the computer what columms the result should have.   Ex.  Select stud_name, grade \nfrom grades;  Return  Table 1: Grades     stud_name  grade      name  56    name  78     Ex.   Select avg(grade)\nFrom grades;     avg(grade)      72.8     Ex.  select max(grade)\nfrom grades;     max      94     Ex.  Select stud_name, grade, crn \nfrom grades\nwhere crn = 23456;     stud_name  grade  crn      Joe Smith  80  23456    John Jacks  45  23456    Al Green  66  23456    Greg Black  60  23456    Patricia D  94  23456     Ex.   Select stud_name, grade \nfrom grades\nwhere prof_name = \u201cJobs\u201d;  Note: text must be surrended by quotes.      stud_name  grade      Meg Lyon  79    Jane McKen  83    Richard Fe  70    Paul Shelb  66    John Jacks  85", 
            "title": "Query"
        }, 
        {
            "location": "/Lecture/2-Databases/#you-should-know", 
            "text": "How to step through pseudocode  How to write some simple SQL queries using: \u2013  avg  max  where", 
            "title": "You should know"
        }, 
        {
            "location": "/Lecture/2-Databases/#lecture-4-january-11th-2017", 
            "text": "Select *  is shorthand for \u201cselect all of the columns of the table\u201d.   *  can be viewed as a wild card.   select * from grades where crn = 23456 and grade   50;  select count(*)  will return the number of rows returned. (Important for assignment 1).   select * from grades order by stud_name;  will order the entries.  select * from grades order by grade desc;  will sort by descending order.  Question: Create a list of student names for Turing\u2019s class, ordered by name?  select stud_name from grades where prof_name = Turing order by stud_name;", 
            "title": "Lecture 4 - January 11th, 2017"
        }, 
        {
            "location": "/Lecture/2-Databases/#you-should-know_1", 
            "text": "How to step through pseudocode   How to write some simple SQL queries using:   avg  max  where  select *   select count(*)  order by", 
            "title": "You should know"
        }, 
        {
            "location": "/Lecture/2-Databases/#more-pseudocode-practice", 
            "text": "Question:  Write a query to print phone number of a person if it exists in the table    input: name_in (holds the name we look for)     name  number      Joe  472-5700    Leo  472-5702    Sara  472-5701     Step1 i=1\nStep2 found=NO\nStep3 while i =  #rows in table do Step4-7\nStep4   if name in row i is name_in do Step5 6\nStep5       print number in row i\nStep6       found=YES\nStep7   i= i+1\nStep8 if found = NO do Step9\nStep9   print  no such person in directory.   Inefficiency, if you find the name and it's the first one in the table, the while loop will still run.   Step1 i=1\nStep2 found=NO\nStep3 while i =  #rows in table AND found = NO do Step4-7\nStep4   if name in row i is name_in do Step5 6\nStep5       print number in row i\nStep6       found=YES\nStep7   i= i+1\nStep8 if found = NO do Step9\nStep9   print  no such person in directory.   Execution:   name_in = \"Leo\"\ni=1\nfound = NO", 
            "title": "More Pseudocode Practice"
        }, 
        {
            "location": "/Lecture/2-Databases/#rows-3", 
            "text": "i = 2\n\n--\n\n472-5702\nfound = YES\n\ni = 3\n\n--\n\nExit while loop  select number from phone_numbers where name = \"Leo\";  - will be the query.", 
            "title": "rows = 3"
        }, 
        {
            "location": "/Lecture/2-Databases/#collatz-conjecture", 
            "text": "Pick a number. If it\u2019s even, divide by two, if odd mulTply by three and add one Stop if the number is 1  Question: Write this in Pseudocode    Bonus: Of Interest  *  No one knows if there\u2019s a number for which the collatz conjecture will not terminate\n*  Has been checked for all numbers up to 260 \u2013  All of which do terminate at 1  inpurt num+in (number to test)\nif num_in   1\n    print  error, bad number  Exit \n\ncur_num = num_in\n    while cur_num is not 1\n        if cur_num is even do \n            divide by 2\n        else if cur_num is odd do \n            cur_num X 3 + 1  num_in = 4\ncur_num = 4  cur_num = 2  cur_num = 1  Exit while loop  --  num_in = 5\ncur_num = 5  cur_num = 16  cur_num = 8  cur_num = 4  cur_num = 2  cur_num = 1  Exit while loop", 
            "title": "Collatz Conjecture"
        }, 
        {
            "location": "/Lecture/2-Databases/#lecture-5-january-13th-2017", 
            "text": "", 
            "title": "Lecture 5 - January 13th, 2017"
        }, 
        {
            "location": "/Lecture/2-Databases/#missed-class", 
            "text": "", 
            "title": "Missed Class"
        }
    ]
}