{
    "docs": [
        {
            "location": "/", 
            "text": "CSC 106\n\n\nConnex\n\n\n\n\nInstructor\n: Alona Fyshe\n\n\nOffice\n: ECS 618\n\n\nEmail\n: \nafyshe@uvic.ca\n\n\nOffice Hours\n:\n\n\nWednesday, 09:30am to 11:20am \n\n\nOr by appointment\n\n\n\n\n\n\n\n\nOverview\n\n\nA general introduction to the field of computer science, its basic areas and its connections to interdisciplinary topics.\n\n\nTextbook\n\n\nThere is no textbook required for this course. \n\n\nThe recommended text is: \n\n\n\n\nInvitation to Computer Science (7th edition) by G. Michael Schneider and Judith L. Gersting, Cengage Learning.\n\n\n\n\nAssessment\n\n\n\n\n\n\n\n\nTask\n\n\nWeight\n\n\n\n\n\n\n\n\n\n\nAssignments\n\n\n40%\n\n\n\n\n\n\nLab Attendance\n\n\n5%\n\n\n\n\n\n\nMidterm Exams (3)\n\n\n55%", 
            "title": "Home"
        }, 
        {
            "location": "/#csc-106", 
            "text": "", 
            "title": "CSC 106"
        }, 
        {
            "location": "/#connex", 
            "text": "Instructor : Alona Fyshe  Office : ECS 618  Email :  afyshe@uvic.ca  Office Hours :  Wednesday, 09:30am to 11:20am   Or by appointment", 
            "title": "Connex"
        }, 
        {
            "location": "/#overview", 
            "text": "A general introduction to the field of computer science, its basic areas and its connections to interdisciplinary topics.", 
            "title": "Overview"
        }, 
        {
            "location": "/#textbook", 
            "text": "There is no textbook required for this course.   The recommended text is:    Invitation to Computer Science (7th edition) by G. Michael Schneider and Judith L. Gersting, Cengage Learning.", 
            "title": "Textbook"
        }, 
        {
            "location": "/#assessment", 
            "text": "Task  Weight      Assignments  40%    Lab Attendance  5%    Midterm Exams (3)  55%", 
            "title": "Assessment"
        }, 
        {
            "location": "/1-Introduction/", 
            "text": "CSC 106 - Introduction\n\n\nLecture 1 - January 4th, 2017\n\n\nThese notes list the main ideas for this lecture. Please check out Alona Fyshe's slides\n\n\n\n\n\n\nAbacus (Japanese)\n\n\nWhy should we care about polynomials?\n\n\nAnalytical Engine\n\n\nPunch Cards (Held Instructions)\n\n\nRAM \n\n\nCPU\n\n\n\n\n\n\nTabulate the Census\n\n\nData Punch Cards\n\n\nIBM\n\n\n\n\n\n\nComputers (Who invented the first computer? A lot of people.)\n\n\nBinary \n\n\nConrad Zuse (Standard - Binary)\n\n\nAlan Turing (Crack German Codes - WW2)\n\n\nColossus (Crack German Codes - WW2)\n\n\nENIAC\n\n\nSolid State Transistor (Computers no longer for Gov, also for Business) \n\n\nApple (Bring Computers to Home)\n\n\nMacintosh (Desktop and Folders - Computers no longer just a terminal)", 
            "title": "1 Introduction"
        }, 
        {
            "location": "/1-Introduction/#csc-106-introduction", 
            "text": "", 
            "title": "CSC 106 - Introduction"
        }, 
        {
            "location": "/1-Introduction/#lecture-1-january-4th-2017", 
            "text": "These notes list the main ideas for this lecture. Please check out Alona Fyshe's slides    Abacus (Japanese)  Why should we care about polynomials?  Analytical Engine  Punch Cards (Held Instructions)  RAM   CPU    Tabulate the Census  Data Punch Cards  IBM    Computers (Who invented the first computer? A lot of people.)  Binary   Conrad Zuse (Standard - Binary)  Alan Turing (Crack German Codes - WW2)  Colossus (Crack German Codes - WW2)  ENIAC  Solid State Transistor (Computers no longer for Gov, also for Business)   Apple (Bring Computers to Home)  Macintosh (Desktop and Folders - Computers no longer just a terminal)", 
            "title": "Lecture 1 - January 4th, 2017"
        }, 
        {
            "location": "/2-Databases/", 
            "text": "Databases and Pseudocode\n\n\nLecture 2 - January 6th, 2017\n\n\nThese notes list the main ideas for this lecture. Please check out Alona Fyshe's slides\n\n\n\n\n\n\n\n\nMotivating Example:\n\n\n\n\nCSC 106 - Keeping Records of Grades\n\n\nGoal: How to work with this Data\n\n\n\n\n\n\n\n\nPseudocode -\n Logic writing on your code.\n\n\n\n\nAlgorithm -\n Sets of steps\n\n\n\n\n\n\nSolution For: The above question\n\n\ntotal = 0\ncount = 0\ni = 1\n\nwhile i =\n total # rows in table\n    total = total + grade in row i\n    count = count + 1\n    i = i + 1\n\naverage = total / count\n\n\n\n\nSolution For: Keeping track of grades for a specific teacher\n\n\ntotal = 0\ncount = 0 \ni = 1\n\nwhile i =\n total # rows in table\n    if prof-name of row i = Turing\n        total = toal + grade in row i\n        count = count + 1\n    i = i + 1\n\naverage = total / count\n\n\n\n\nSolution For: Inserting a new grade in the table\n \n\n\nBefore:\n\n\ni = # rows in table + 1\n\nstud_id for row i = 313\nstud_name for row i = Steve Cook\ncourse_name for row i = CSC 106 (Too much info)\nCRN for row i = 23456\nprof-name for row i = Turing (Too much info - CRN is all mighty)\ngrade for row i = 91\n\n\n\n\nAfter:\n\n\ni = # rows in grades table + 1\n\nstud_id for row i = 313\nstud_name for row i = Steve Cook\nCRN for row i = 23456\ngrade for row i = 91\n\n\n\n\n\n\nNOTE:\n The question now has two tables to work with instead of one. \n\n\n\n\nSolution For: Calculating the average for students in class with CRN 23457\n\n\ntotal = 0\ncount = 0\ni = 1\n\nwhile i =\n total # of rows in grades tables\n    if crn in row i is 23457\n        total = total + grade in row i\n        count = count + 1\n    i + i + 1\naverage = total / count\n\n\n\n\nSolution For: Calculating a better average\n\n\nif  count = 0 \n    average = 0\nelse \n    average = total/count\n\n\n\n\nSolution For: Table Case: Inserting a new grade into two tables\n\n\nif input crn is not in classes table \n    return error\nelse \n    stud_id for row i = 313\n    stud_name = Steve Cook\n    crn = 23456\n    grade = 91\n\n\n\n\nSolution For: Calculating the average grade for classes that Turing teaches\n\n\ntotal = 0 \ncount = 0\nj = 1 (Index into classes table)\n\nwhile j =\n # rows in classes table \n    if row j of classes tables has prof_name = Turing\n        my_crn = crn in j of classes table\n\n        i = 1\n        while i =\n #rows in grades table\n            if crn for row i of grades table  = my_crn\n                table = total + grade in row i of grades table\n                count = count + 1\n            i = i + 1\n    j = j + 1\n\n\n\n\nLecture 3 - January 10th, 2017\n\n\nTrace Through Code\n\nCode:\n\n\nStep1 - total=0\nStep2 - count=0\nStep3 - i=1\nStep4 - while i \n= # rows in table, repeat steps 5 through 8\nStep5 -     if prof_name of row i equals Turing, do line 6 and 7 \nStep6 -         total = total + grade in row i\nStep7 -         count = count + 1\nStep8 -     i=i+1\nStep9 - average = total / count\n\n\n\n\nTable 1:\n| stud_id       | stud_name     | course_name  | crn      | prof_name | grade |\n| ------------- |:-------------:| ------------:|---------:|----------:|------:|\n| 111           | John Jackson  | CSC 106      | 23456    | Turing    | 45    |\n| 200           | Jane McKenzie | CSC 106      | 23457    | Jobs      | 83    |\n| 342           | Patricia Dune | CSC 106      | 23456    | Turing    | 94    |\n| 301           | Meg Lyon      | CSC 106      | 23457    | Jobs      | 79    |\nNote: #rows = 4\nSolution:\n\n\ntotal=0\ncount=0\ni=1\n\n--\n\ntotal=45\ncount=1\n1=2\n\n--\n\ni=3\n\n--\n\ntotal=139\ncount=2\ni=4\n\n--\n\ni=5\n\n-- \n\nAverage = 139/2 = 69.5\n\n\n\n\n\nWrite pseudocode that calculates the maximum grade for a student in class with crn = 23456\n\n\nTrace Through Code\n\nCode:\n\n\nStep1 - max=-1\nStep2 - i=1\nStep3 - while i \n= # rows in table, repeat steps 4 through 7\nStep4 -     if crn of row i equals 23456, do line 5 and 6 \nStep5 -         if max \n grade in row i do line 6\nStep6 -             max = grade in row i \nStep7 -     i=i+1\n\n\n\n\nTable:\n| stud_id       | stud_name     | course_name  | crn      | prof_name | grade |\n| ------------- |:-------------:| ------------:|---------:|----------:|------:|\n| 111           | John Jackson  | CSC 106      | 23456    | Turing    | 45    |\n| 200           | Jane McKenzie | CSC 106      | 23457    | Jobs      | 83    |\n| 342           | Patricia Dune | CSC 106      | 23456    | Turing    | 94    |\n| 301           | Meg Lyon      | CSC 106      | 23457    | Jobs      | 79    |\n\n\nSolution: \n\n\nmax=-1\ni=1\n\n--\n\nmax=45\ni=2\n\n--\n\ni=3\n\n--\n\nmax=94\ni=4\n\n--\n\ni=5\n\n\n\n\n\n\n\nSQL\n\n\nSql is a structured query language.\n\n\nDatabase\n\n\nA database is a collection of tables.\n\n\nInstall SqLite3\n\n\nbrew install sqlite\n\n\n\n\nStart by making a blank table: \n\n\ncreate table grades( stud_id int, stud_name text, course_name text, crn int, prof_name text, grade int);\n\n\n\n\nNote: Order of values must match the order of the columns when you created the table.\n\n\nQuery\n\n\nA query is a select statement that tells the computer what columms the result should have. \n\n\nEx. \n\n\nSelect stud_name, grade \nfrom grades;\n\n\n\n\nReturn\nTable 1: Grades\n| stud_name | grade |\n| ---------:| -----:|\n| name      | 56    |\n| name      | 78    |\n\n\nEx. \n\n\nSelect avg(grade)\nFrom grades;\n\n\n\n\n\n\n\n\n\n\navg(grade)\n\n\n\n\n\n\n\n\n\n\n72.8\n\n\n\n\n\n\n\n\nEx.\n\n\nselect max(grade)\nfrom grades;\n\n\n\n\n\n\n\n\n\n\nmax\n\n\n\n\n\n\n\n\n\n\n94\n\n\n\n\n\n\n\n\nEx.\n\n\nSelect stud_name, grade, crn \nfrom grades\nwhere crn = 23456;\n\n\n\n\n\n\n\n\n\n\nstud_name\n\n\ngrade\n\n\ncrn\n\n\n\n\n\n\n\n\n\n\nJoe Smith\n\n\n80\n\n\n23456\n\n\n\n\n\n\nJohn Jacks\n\n\n45\n\n\n23456\n\n\n\n\n\n\nAl Green\n\n\n66\n\n\n23456\n\n\n\n\n\n\nGreg Black\n\n\n60\n\n\n23456\n\n\n\n\n\n\nPatricia D\n\n\n94\n\n\n23456\n\n\n\n\n\n\n\n\nEx. \n\n\nSelect stud_name, grade \nfrom grades\nwhere prof_name = \u201cJobs\u201d;\n\n\n\n\nNote: text must be surrended by quotes. \n\n\n\n\n\n\n\n\nstud_name\n\n\ngrade\n\n\n\n\n\n\n\n\n\n\nMeg Lyon\n\n\n79\n\n\n\n\n\n\nJane McKen\n\n\n83\n\n\n\n\n\n\nRichard Fe\n\n\n70\n\n\n\n\n\n\nPaul Shelb\n\n\n66\n\n\n\n\n\n\nJohn Jacks\n\n\n85\n\n\n\n\n\n\n\n\n\n\nYou should know\n\n\n\n\nHow to step through pseudocode\n\n\nHow to write some simple SQL queries using: \u2013  avg\n\n\nmax\n\n\nwhere", 
            "title": "2 Databases"
        }, 
        {
            "location": "/2-Databases/#databases-and-pseudocode", 
            "text": "", 
            "title": "Databases and Pseudocode"
        }, 
        {
            "location": "/2-Databases/#lecture-2-january-6th-2017", 
            "text": "These notes list the main ideas for this lecture. Please check out Alona Fyshe's slides     Motivating Example:   CSC 106 - Keeping Records of Grades  Goal: How to work with this Data     Pseudocode -  Logic writing on your code.   Algorithm -  Sets of steps    Solution For: The above question  total = 0\ncount = 0\ni = 1\n\nwhile i =  total # rows in table\n    total = total + grade in row i\n    count = count + 1\n    i = i + 1\n\naverage = total / count  Solution For: Keeping track of grades for a specific teacher  total = 0\ncount = 0 \ni = 1\n\nwhile i =  total # rows in table\n    if prof-name of row i = Turing\n        total = toal + grade in row i\n        count = count + 1\n    i = i + 1\n\naverage = total / count  Solution For: Inserting a new grade in the table    Before:  i = # rows in table + 1\n\nstud_id for row i = 313\nstud_name for row i = Steve Cook\ncourse_name for row i = CSC 106 (Too much info)\nCRN for row i = 23456\nprof-name for row i = Turing (Too much info - CRN is all mighty)\ngrade for row i = 91  After:  i = # rows in grades table + 1\n\nstud_id for row i = 313\nstud_name for row i = Steve Cook\nCRN for row i = 23456\ngrade for row i = 91   NOTE:  The question now has two tables to work with instead of one.    Solution For: Calculating the average for students in class with CRN 23457  total = 0\ncount = 0\ni = 1\n\nwhile i =  total # of rows in grades tables\n    if crn in row i is 23457\n        total = total + grade in row i\n        count = count + 1\n    i + i + 1\naverage = total / count  Solution For: Calculating a better average  if  count = 0 \n    average = 0\nelse \n    average = total/count  Solution For: Table Case: Inserting a new grade into two tables  if input crn is not in classes table \n    return error\nelse \n    stud_id for row i = 313\n    stud_name = Steve Cook\n    crn = 23456\n    grade = 91  Solution For: Calculating the average grade for classes that Turing teaches  total = 0 \ncount = 0\nj = 1 (Index into classes table)\n\nwhile j =  # rows in classes table \n    if row j of classes tables has prof_name = Turing\n        my_crn = crn in j of classes table\n\n        i = 1\n        while i =  #rows in grades table\n            if crn for row i of grades table  = my_crn\n                table = total + grade in row i of grades table\n                count = count + 1\n            i = i + 1\n    j = j + 1", 
            "title": "Lecture 2 - January 6th, 2017"
        }, 
        {
            "location": "/2-Databases/#lecture-3-january-10th-2017", 
            "text": "Trace Through Code \nCode:  Step1 - total=0\nStep2 - count=0\nStep3 - i=1\nStep4 - while i  = # rows in table, repeat steps 5 through 8\nStep5 -     if prof_name of row i equals Turing, do line 6 and 7 \nStep6 -         total = total + grade in row i\nStep7 -         count = count + 1\nStep8 -     i=i+1\nStep9 - average = total / count  Table 1:\n| stud_id       | stud_name     | course_name  | crn      | prof_name | grade |\n| ------------- |:-------------:| ------------:|---------:|----------:|------:|\n| 111           | John Jackson  | CSC 106      | 23456    | Turing    | 45    |\n| 200           | Jane McKenzie | CSC 106      | 23457    | Jobs      | 83    |\n| 342           | Patricia Dune | CSC 106      | 23456    | Turing    | 94    |\n| 301           | Meg Lyon      | CSC 106      | 23457    | Jobs      | 79    |\nNote: #rows = 4\nSolution:  total=0\ncount=0\ni=1\n\n--\n\ntotal=45\ncount=1\n1=2\n\n--\n\ni=3\n\n--\n\ntotal=139\ncount=2\ni=4\n\n--\n\ni=5\n\n-- \n\nAverage = 139/2 = 69.5  Write pseudocode that calculates the maximum grade for a student in class with crn = 23456  Trace Through Code \nCode:  Step1 - max=-1\nStep2 - i=1\nStep3 - while i  = # rows in table, repeat steps 4 through 7\nStep4 -     if crn of row i equals 23456, do line 5 and 6 \nStep5 -         if max   grade in row i do line 6\nStep6 -             max = grade in row i \nStep7 -     i=i+1  Table:\n| stud_id       | stud_name     | course_name  | crn      | prof_name | grade |\n| ------------- |:-------------:| ------------:|---------:|----------:|------:|\n| 111           | John Jackson  | CSC 106      | 23456    | Turing    | 45    |\n| 200           | Jane McKenzie | CSC 106      | 23457    | Jobs      | 83    |\n| 342           | Patricia Dune | CSC 106      | 23456    | Turing    | 94    |\n| 301           | Meg Lyon      | CSC 106      | 23457    | Jobs      | 79    |  Solution:   max=-1\ni=1\n\n--\n\nmax=45\ni=2\n\n--\n\ni=3\n\n--\n\nmax=94\ni=4\n\n--\n\ni=5", 
            "title": "Lecture 3 - January 10th, 2017"
        }, 
        {
            "location": "/2-Databases/#sql", 
            "text": "Sql is a structured query language.", 
            "title": "SQL"
        }, 
        {
            "location": "/2-Databases/#database", 
            "text": "A database is a collection of tables.  Install SqLite3  brew install sqlite  Start by making a blank table:   create table grades( stud_id int, stud_name text, course_name text, crn int, prof_name text, grade int);  Note: Order of values must match the order of the columns when you created the table.", 
            "title": "Database"
        }, 
        {
            "location": "/2-Databases/#query", 
            "text": "A query is a select statement that tells the computer what columms the result should have.   Ex.   Select stud_name, grade \nfrom grades;  Return\nTable 1: Grades\n| stud_name | grade |\n| ---------:| -----:|\n| name      | 56    |\n| name      | 78    |  Ex.   Select avg(grade)\nFrom grades;     avg(grade)      72.8     Ex.  select max(grade)\nfrom grades;     max      94     Ex.  Select stud_name, grade, crn \nfrom grades\nwhere crn = 23456;     stud_name  grade  crn      Joe Smith  80  23456    John Jacks  45  23456    Al Green  66  23456    Greg Black  60  23456    Patricia D  94  23456     Ex.   Select stud_name, grade \nfrom grades\nwhere prof_name = \u201cJobs\u201d;  Note: text must be surrended by quotes.      stud_name  grade      Meg Lyon  79    Jane McKen  83    Richard Fe  70    Paul Shelb  66    John Jacks  85", 
            "title": "Query"
        }, 
        {
            "location": "/2-Databases/#you-should-know", 
            "text": "How to step through pseudocode  How to write some simple SQL queries using: \u2013  avg  max  where", 
            "title": "You should know"
        }, 
        {
            "location": "/Homework-And-Announcements/", 
            "text": "Announcements\n\n\nJanuary 6th, 2016\n\n\n\n\nAlice Gibbons (aligibbo@uvic.ca) - Main lab instructor\n\n\n10$ Access Cards (Get one from the library to have access outside of lab hours.)\n\n\n\n\nHomework\n\n\nJanuary 6th, 2016\n\n\n\n\nHow to write Pseudocode to calculate the average grade different groups of students.\n\n\nExtra practice (try with both one and two-table scenarios) - Available through Alona Fyshe slides.", 
            "title": "Homework And Announcements"
        }, 
        {
            "location": "/Homework-And-Announcements/#announcements", 
            "text": "", 
            "title": "Announcements"
        }, 
        {
            "location": "/Homework-And-Announcements/#january-6th-2016", 
            "text": "Alice Gibbons (aligibbo@uvic.ca) - Main lab instructor  10$ Access Cards (Get one from the library to have access outside of lab hours.)", 
            "title": "January 6th, 2016"
        }, 
        {
            "location": "/Homework-And-Announcements/#homework", 
            "text": "", 
            "title": "Homework"
        }, 
        {
            "location": "/Homework-And-Announcements/#january-6th-2016_1", 
            "text": "How to write Pseudocode to calculate the average grade different groups of students.  Extra practice (try with both one and two-table scenarios) - Available through Alona Fyshe slides.", 
            "title": "January 6th, 2016"
        }
    ]
}